name: 🚀 CI/CD to AWS EC2 with Docker

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout código
        uses: actions/checkout@v3

      - name: 🔐 Configurar clave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Desplegar en EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "📦 Verificando Java..."
            if ! java -version &>/dev/null; then
              echo "⚙️ Instalando OpenJDK 17..."
              sudo apt update && sudo apt install openjdk-17-jdk -y
            fi

            echo "📦 Verificando Maven..."
            if ! mvn -v &>/dev/null && [ ! -f mvnw ]; then
              echo "⚙️ Instalando Maven..."
              sudo apt install maven -y
            fi

            echo "🔁 Clonando o actualizando repositorio..."
            mkdir -p ~/movies-api
            cd ~/movies-api

            if [ ! -d .git ]; then
              git clone https://github.com/Danielr-1998/movie-rest.git .
            else
              git pull origin main
            fi

            echo "🔧 Dando permisos al wrapper Maven..."
            chmod +x mvnw

            echo "⚙️ Configurando JAVA_HOME..."
            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))

            echo "🔨 Construyendo JAR..."
            ./mvnw clean package

            echo "🐳 Reconstruyendo imagen Docker..."
            docker stop movies-api || true
            docker rm movies-api || true
            docker build -t movies-api .

            echo "🚀 Ejecutando contenedor en segundo plano..."
            docker run -d --name movies-api -p 8080:8080 movies-api
          EOF
